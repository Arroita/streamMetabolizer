# np_oipc_eu_km.jags

data {

  for(i in 1:(n-1)) {
    # Coefficients by lag (e.g., frac_GPP[i] applies to the DO step from i to i+1)
    coef_GPP[i]  <- frac_GPP[i] / depth[i]
    coef_ER[i]   <- frac_ER[ i] / depth[i]
    coef_K600_part[i] <- KO2_conv[i] * frac_D[i]
    
  }
  
}

model {

  # Model DO time series (Euler version, with process error)
  DO_mod[1] <- DO_obs_1
  err_proc_acor[1] <- err_proc_acor_inc[1]
  for(i in 1:(n-1)) {
    DO_mod[i+1] <- (
      err_proc_acor[i] +
      DO_mod[i] +
      GPP_daily * coef_GPP[i] +
      ER_daily * coef_ER[i] +
      K600_daily * coef_K600_part[i] * (DO_sat[i] - DO_mod[i])
    )
    err_proc_acor[i+1] <- err_proc_acor_phi * err_proc_acor[i] + err_proc_acor_inc[i]
    
  }
  
  # Process error
  for(i in 1:(n-1)) {
    err_proc_acor_inc[i] ~ dnorm(0, pow(err_proc_acor_sigma, -2))
  }
  # Autocorrelation (phi) & SD (sigma) of the process errors
  err_proc_acor_phi ~ dunif(err_proc_acor_phi_min, err_proc_acor_phi_max)
  err_proc_acor_sigma ~ dunif(err_proc_acor_sigma_min, err_proc_acor_sigma_max)
  
  # Observation error
  for(i in 1:n) {
    DO_obs[i] ~ dnorm(DO_mod[i], pow(err_obs_iid_sigma, -2))
  }
  # SD (sigma) of the observation errors
  err_obs_iid_sigma ~ dunif(err_obs_iid_sigma_min, err_obs_iid_sigma_max)
  
  # Daily metabolism values
  GPP_daily ~ dnorm(GPP_daily_mu, pow(GPP_daily_sigma, -2))
  ER_daily ~ dnorm(ER_daily_mu, pow(ER_daily_sigma, -2))
  K600_daily ~ dnorm(K600_daily_mu, pow(K600_daily_sigma, -2))
  
}

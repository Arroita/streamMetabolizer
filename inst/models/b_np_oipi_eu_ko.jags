# b_np_oipi_eu_ko.jags

data {
  for(i in 1:(n-1)) {
    # Coefficients by lag (e.g., frac_GPP[i] applies to the DO step from i to i+1)
    coef_GPP[i]  <- frac_GPP[i] / depth[i]
    coef_ER[i]   <- frac_ER[ i] / depth[i]
    coef_K600_full[i] <- KO2_conv[i] * frac_D[i] * 
      (DO_sat[i] - DO_obs[i])
  }
}

model {
  # Model DO time series
  # * Euler version
  # * observation error
  # * IID process error
  # * reaeration depends on DO_obs
  
  # dDO model
  dDO_mod <- 
    GPP_daily * coef_GPP +
    ER_daily * coef_ER +
    K600_daily * coef_K600_full
  
  # DO model
  DO_mod[1] <- DO_obs_1
  for(i in 1:(n-1)) {
    DO_mod[i+1] <- (
      DO_mod[i] +
      dDO_mod[i])
  }

  # Independent, identically distributed process error
  for (i in 1:(n-1)) {
    dDO_obs[i] ~ dnorm(dDO_mod[i], pow(err_proc_iid_sigma, -2))
  }
  err_proc_iid_sigma ~ dunif(err_proc_iid_sigma_min, err_proc_iid_sigma_max)
  
  # Independent, identically distributed observation error
  for(i in 1:n) {
    DO_obs[i] ~ dnorm(DO_mod[i], pow(err_obs_iid_sigma, -2))
  }
  # SD (sigma) of the observation errors
  err_obs_iid_sigma ~ dunif(err_obs_iid_sigma_min, err_obs_iid_sigma_max)
  
  # Daily metabolism values
  GPP_daily ~ dnorm(GPP_daily_mu, pow(GPP_daily_sigma, -2))
  ER_daily ~ dnorm(ER_daily_mu, pow(ER_daily_sigma, -2))
  K600_daily ~ dnorm(K600_daily_mu, pow(K600_daily_sigma, -2))
}
